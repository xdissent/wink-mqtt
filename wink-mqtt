#!/usr/bin/env sh

_program() {
  core_usesIn core temporaryFiles
  core_usesIn core/variable variable
  core_usesIn bishbosh validate backend connection
  core_usesIn winkmqtt sync rsyslog install

  # HACK: Default implementation breaks when invoked without $HOME
  core_init_workAroundBugInHomeFolderTildeHandlingAndEnsureHOMEIsAlwaysSet() {
    core_variable_isSet HOME || export HOME="$(pwd -P)"
  }

  bishbosh_connection_handler_CONNACK() {
    core_message DEBUG 'connected'
    winkmqtt_sync_all
    winkmqtt_rsyslog_handler
  }

  bishbosh_connection_handler_PUBLISH() {
    local value="$(cat "$messageFilePath")"
    local topic="$(cat "$topicNameFilePath")"
    core_message DEBUG "message from topic $topic value $value"
    winkmqtt_sync_set_attr $(echo "$topic" | sed "s;^/\\?${winkmqtt_topicBase}/;;" | awk -F / '{print $1,$2}') "$value"
  }

  winkmqtt() {
    if [ "$winkmqtt_install" = 'yes' ]; then
      winkmqtt_install
      exit 0
    fi

    # HACK Have to copy stdin for some reason
    exec 7<&0

    # HACK rsyslog chokes if we don't redirect stderr, even if not logging
    core_variable_isUnsetOrEmpty winkmqtt_log && exec 2>/dev/null || exec 2>> "$winkmqtt_log"

    # Initialize bish-bosh
    bishbosh_backend_find
    local TMP_FOLDER
    core_temporaryFiles_newFolderToRemoveOnExit
    local bishbosh_temporaryFolderPath="$TMP_FOLDER"

    # Create runtime temp folders
    local runTemp="${bishbosh_temporaryFolderPath}/run"
    core_variable_isSet bishbosh_clientPath || bishbosh_clientPath="${runTemp}/client"
    core_variable_isSet bishbosh_lockPath || bishbosh_lockPath="${runTemp}/lock"
    core_variable_isSet bishbosh_sessionPath || bishbosh_sessionPath="${runTemp}/session"
    mkdir -p "$bishbosh_clientPath"
    mkdir -p "$bishbosh_lockPath"
    mkdir -p "$bishbosh_sessionPath"

    # Run bish-bosh main
    bishbosh_connection_makeClientConnection
  }
}

_program_name='wink-mqtt'
_program_namespace='winkmqtt'
_program_version='unversioned'
_program_package_or_build=''
_program_path="$([ "${_program_fattening_program_path+set}" = 'set' ] && printf '%s\n' "$_program_fattening_program_path" || ([ "${0%/*}" = "${0}" ] && printf '%s\n' '.' || printf '%s\n' "${0%/*}"))"
_program_libPath="${_program_path}/lib"
_program_etcPath="${_program_path}/etc"
_program_varPath="${_program_path}/var"
_program_entrypoint='winkmqtt'
_program_ignoreDependencies=no

_program_commandLine_parseInitialise() {
  # Set bish-bosh config defaults for wink hub's firmware
  bishbosh_backends='socat'
  bishbosh_transport='inet'
  bishbosh_tunnel='none'
  bishbosh_server='test.mosquitto.org'
  bishbosh_clientId='winkmqtt'
  bishbosh_connect_cleanSession='1'
  bishbosh_readLatency='100'
  bishbosh_readLatency_inFractionalSeconds='0.100'
  bishbosh_proxyKind='none'
  bishbosh_connectTimeout='30'
  winkmqtt_aprontestPath='/usr/sbin/aprontest'
  winkmqtt_topicBase='home'
  winkmqtt_cachePrefix='winkmqtt_cache_'
  winkmqtt_install='no'

  # Source custom config
  [ ! -f "${_program_etcPath}/${_program_name}" ] || . "${_program_etcPath}/${_program_name}" 1>&2
}

_program_commandLine_handleNonOptions() {
  # Assume any non-option arg is `install`
  [ $# -eq 0 ] || winkmqtt_install='yes'
}

. "$_program_libPath"/shellfire/core/init.functions "$@"
